{"ast":null,"code":"import { INCREMENT, DECREMENT, RESET } from \"./actionTypes\";\nconst initialState = {\n  count: 0\n};\nconst counterreducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case INCREMENT:\n      return {\n        ...state,\n        count: state.count + 1\n      };\n    case DECREMENT:\n      return {\n        ...state,\n        count: state.count - 1\n      };\n    case RESET:\n      return {\n        ...state,\n        count: 0\n      };\n    default:\n      return state;\n  }\n};\nexport default counterreducer;","map":{"version":3,"names":["INCREMENT","DECREMENT","RESET","initialState","count","counterreducer","state","action","type"],"sources":["/mnt/DATA/JAVASCRIPT AND REACT/MINOR PROJECT (REACT)/4.Counter App (Redux)/src/Redux/reducer.js"],"sourcesContent":["import { INCREMENT, DECREMENT,RESET } from \"./actionTypes\";\nconst initialState={\n    count: 0,\n};\nconst counterreducer= (state=initialState,action) =>{\nswitch(action.type){\n    case INCREMENT:\n    return{...state,count:state.count+1};\n    case DECREMENT:\n        return{...state, count:state.count-1};\n    case RESET:\n        return{...state, count:0}\n\n        default:\n            return state;\n}\n}\nexport default counterreducer;"],"mappings":"AAAA,SAASA,SAAS,EAAEC,SAAS,EAACC,KAAK,QAAQ,eAAe;AAC1D,MAAMC,YAAY,GAAC;EACfC,KAAK,EAAE;AACX,CAAC;AACD,MAAMC,cAAc,GAAE,YAA8B;EAAA,IAA7BC,KAAK,uEAACH,YAAY;EAAA,IAACI,MAAM;EAChD,QAAOA,MAAM,CAACC,IAAI;IACd,KAAKR,SAAS;MACd,OAAM;QAAC,GAAGM,KAAK;QAACF,KAAK,EAACE,KAAK,CAACF,KAAK,GAAC;MAAC,CAAC;IACpC,KAAKH,SAAS;MACV,OAAM;QAAC,GAAGK,KAAK;QAAEF,KAAK,EAACE,KAAK,CAACF,KAAK,GAAC;MAAC,CAAC;IACzC,KAAKF,KAAK;MACN,OAAM;QAAC,GAAGI,KAAK;QAAEF,KAAK,EAAC;MAAC,CAAC;IAEzB;MACI,OAAOE,KAAK;EAAC;AAEzB,CAAC;AACD,eAAeD,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}